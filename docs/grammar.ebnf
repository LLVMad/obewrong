Program ::= { ClassDeclaration }

ClassDeclaration ::= 
    "class" ClassName [ "extends" ClassName ] 
    "is" { MemberDeclaration } "end"

ClassName ::= Identifier

MemberDeclaration ::= 
    | VariableDeclaration
    | MethodDeclaration 
    | ConstructorDeclaration

VariableDeclaration ::= 
    "var" Identifier ":" Expression

MethodDeclaration ::= 
    MethodHeader [ MethodBody ]

MethodHeader ::= 
    "method" Identifier [ "(" Parameters ")" ] [ ":" Identifier ]

MethodBody ::= 
    "is" Body "end" 
    | "=>" Expression

Parameters ::= 
    "(" { ParameterDeclaration { "," ParameterDeclaration } } ")"

ParameterDeclaration ::= 
    Identifier ":" Identifier

ConstructorDeclaration ::= 
    "this" [ "(" Parameters ")" ] "is" Body "end"

Body ::= 
    { VariableDeclaration | Statement }

Statement ::= 
    Assignment 
    | WhileLoop 
    | IfStatement 
    | ReturnStatement

Assignment ::= 
    Identifier ":=" Expression

Enum ::=
  "enum" Identifier "is"
  { Identifier, }
  "end"

ForLoop ::=
    "for" Assignment "," Expression "," Assignment "is"
    Body
    "end"

WhileLoop ::= 
    "while" Expression "loop" Body "end"

SwitchStatement ::=
    "switch" Expression "is"
    "case" Primary "then" Body "end"
    [ "case" Primary "then" Body "end"]
    "default" "then" Body "end"
    "end"

IfStatement ::= 
    "if" Expression "then" Body [ "else" Body ] "end"

ReturnStatement ::= 
    "return" [ Expression ]

Expression ::= 
    Primary { "." Identifier [ Arguments ] }

Arguments ::= 
    "(" { Expression { "," Expression } } ")"

Primary ::= 
    | IntegerLiteral
    | RealLiteral 
    | BooleanLiteral 
    | StringLiteral
    | ArrayLiteral
    | this
    | ClassName
    | Identifier
